<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Text" #> 
<#
int maxParameters = 35;
#>#region © Copyright Web Applications (UK) Ltd, 2014.  All rights reserved.
// Copyright (c) 2014, Web Applications UK Ltd
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Web Applications UK Ltd nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL WEB APPLICATIONS UK LTD BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using JetBrains.Annotations;

namespace WebApplications.Utilities
{
<# 
            StringBuilder typeParams = new StringBuilder();
            StringBuilder tuple = new StringBuilder();
            StringBuilder tupleEnd = new StringBuilder();
            StringBuilder typeComments = new StringBuilder();
            StringBuilder paramsComments = new StringBuilder();
            StringBuilder paramsWithType = new StringBuilder();
            StringBuilder outParamsWithType = new StringBuilder();
            StringBuilder paramsWithoutType = new StringBuilder();
            StringBuilder assignments = new StringBuilder();
            for (int i = 1; i <= maxParameters; i++)
            {
                typeParams.Append(String.Format("{0}T{1}", i > 1 ? ", " : String.Empty, i));
                if (i > 1)
                {
                    tuple.Append(", ");
                    if ((i - 1)%7 == 0)
                    {
                        tuple.Append("Tuple<");
                        tupleEnd.Append(">");
                    }
                }
                tuple.Append(String.Format("T{0}", i));
                paramsWithoutType.Clear();
                for (int j = 1; j <= i; j++)
                {
                    if (j > 1)
                    {
                        paramsWithoutType.Append(", ");
                        if ((j - 1)%7 == 0)
                        {
                            int closeCount = 1;
                            paramsWithoutType.Append("new Tuple<");
                            for (int k = j; k <= i; k++)
                            {
                                if (k > j)
                                {
                                    if ((k - 1)%7 == 0)
                                    {
                                        paramsWithoutType.Append(", Tuple<");
                                        closeCount++;
                                    }
                                    else
                                    {
                                        paramsWithoutType.Append(", ");
                                    }
                                }
                                paramsWithoutType.Append(String.Format("T{0}", k));
                            }
                            paramsWithoutType.Append(new string('>', closeCount));
                            paramsWithoutType.Append("(");
                        }
                    }
                    paramsWithoutType.Append(String.Format("item{0}", j));
                }
                paramsWithoutType.Append(new string(')', (i - 1)/7));
                typeComments.Append(
                    String.Format("{0}    /// <typeparam name=\"T{1}\">The type of item {1}.</typeparam>",
                                  Environment.NewLine,
                                  i));
                paramsComments.Append(
                    String.Format("{0}        /// <param name=\"item{1}\">Item {1} of the tuple.</param>",
                                  Environment.NewLine,
                                  i));
                paramsWithType.Append(String.Format("{2}{0}            T{1} item{1}",
                                                    Environment.NewLine,
                                                    i,
                                                    i > 1 ? "," : ""));
                outParamsWithType.Append(String.Format("{2}{0}            out T{1} item{1}",
                                                    Environment.NewLine,
                                                    i,
                                                    i > 1 ? "," : ""));
                assignments.Append(String.Format("{0}            item{1} = tuple{2}.Item{3};",
                                                    Environment.NewLine,
                                                    i,
													string.Concat(Enumerable.Repeat(".Rest", (i-1)/7)),
                                                    (i-1)%7+1));
                String t = tuple.ToString() + tupleEnd.ToString();
				if (i<2) continue;
	#>

	#region Queue with <#= i #> items.
    /// <summary>
    /// A Queue of <see cref="Tuple{<#= typeParams #>}"/>.
    /// </summary><#= typeComments #>
    [PublicAPI]
    public class Queue<<#= typeParams #>> : Queue<Tuple<<#= t #>>>, IEnumerable<<#= typeParams #>>
    {
        /// <summary>
        /// Inserts an object at the beginning of the <see cref="Queue{<#= typeParams #>}" />.
        /// </summary><#= paramsComments #>
        [PublicAPI]
        public void Enqueue(<#= paramsWithType #>)
        {
            Enqueue(new Tuple<<#= t #>>(<#= paramsWithoutType #>));
        }
	    
        /// <summary>
        /// Removes and returns the object at the beginning of the <see cref="Queue{<#= typeParams #>}"/>.
        /// </summary><#= paramsComments #>
        [PublicAPI]
        public void Dequeue(<#= outParamsWithType #>)
        {
            Tuple<<#= t #>> tuple = Dequeue();
            Contract.Assert(tuple != null);<#= assignments #>
        }
	    
        /// <summary>
        /// Returns the object at the beginning of the <see cref="Queue{<#= typeParams #>}"/> without removing it.
        /// </summary><#= paramsComments #>
        [PublicAPI]
        public void Peek(<#= outParamsWithType #>)
        {
            Tuple<<#= t #>> tuple = Peek();
            Contract.Assert(tuple != null);<#= assignments #>
        }
    }
	#endregion
<# 
}
#>
}
 
<#+
  // Insert any template procedures here
#>