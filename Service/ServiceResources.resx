<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cmd_Continue_Description" xml:space="preserve">
    <value>Continue the service.</value>
  </data>
  <data name="Cmd_Continue_Names" xml:space="preserve">
    <value>Continue,Cont,C</value>
  </data>
  <data name="Cmd_CustomCommand_Command_Description" xml:space="preserve">
    <value>An application-defined command flag that indicates which custom command to execute. The value must be between 128 and 256, inclusive.</value>
  </data>
  <data name="Cmd_CustomCommand_Description" xml:space="preserve">
    <value>Executes the custom command number, e.g. command 135.</value>
  </data>
  <data name="Cmd_CustomCommand_Names" xml:space="preserve">
    <value>Command,Execute,Exec,.</value>
  </data>
  <data name="Cmd_Description" xml:space="preserve">
    <value>No description is available for the command in the current language.</value>
  </data>
  <data name="Cmd_Disconnect_Description" xml:space="preserve">
    <value>Disconnect from the service without shutting it down.</value>
  </data>
  <data name="Cmd_Disconnect_Names" xml:space="preserve">
    <value>Quit,Exit,X,Disconnect</value>
  </data>
  <data name="Cmd_Help_Command_Description" xml:space="preserve">
    <value>The name of the command to get help for. If omitted, all commands will be listed.</value>
  </data>
  <data name="Cmd_Help_Description" xml:space="preserve">
    <value>Outputs this help.</value>
  </data>
  <data name="Cmd_Help_Names" xml:space="preserve">
    <value>Help,?</value>
  </data>
  <data name="Cmd_Help_Parameter_Description" xml:space="preserve">
    <value>The name of the parameter to get help for. If omitted, all parameters of the command will be listed.</value>
  </data>
  <data name="Cmd_LogFormat_Description" xml:space="preserve">
    <value>Gets or sets the current log format.</value>
  </data>
  <data name="Cmd_LogFormat_Format_Description" xml:space="preserve">
    <value>The new log format to use. If omitted, the current log format will be returned.</value>
  </data>
  <data name="Cmd_LogFormat_Names" xml:space="preserve">
    <value>LogFormat,lf</value>
  </data>
  <data name="Cmd_LogLevels_Description" xml:space="preserve">
    <value>Gets or sets the valid logging levels.</value>
  </data>
  <data name="Cmd_LogLevels_Levels_Description" xml:space="preserve">
    <value>The valid logging levels. If ommited, the current valid logging levels will be returned.</value>
  </data>
  <data name="Cmd_LogLevels_Names" xml:space="preserve">
    <value>LogLevels,ll</value>
  </data>
  <data name="Cmd_Param_Description" xml:space="preserve">
    <value>No description is available for the parameter in the current language.</value>
  </data>
  <data name="Cmd_Pause_Description" xml:space="preserve">
    <value>Pauses the service.</value>
  </data>
  <data name="Cmd_Pause_Names" xml:space="preserve">
    <value>Pause,P</value>
  </data>
  <data name="Cmd_PowerEvent_Description" xml:space="preserve">
    <value>Sends the power status to the service, e.g. power Suspend.</value>
  </data>
  <data name="Cmd_PowerEvent_Names" xml:space="preserve">
    <value>Power</value>
  </data>
  <data name="Cmd_PowerEvent_PowerStatus_Description" xml:space="preserve">
    <value>The power status to send to the service.</value>
  </data>
  <data name="Cmd_SessionChange_ChangeReason_Description" xml:space="preserve">
    <value>The reason for the change notice.</value>
  </data>
  <data name="Cmd_SessionChange_Description" xml:space="preserve">
    <value>Sends a session changed notice to the service, e.g session SessionLogon 0</value>
  </data>
  <data name="Cmd_SessionChange_Names" xml:space="preserve">
    <value>Session</value>
  </data>
  <data name="Cmd_SessionChange_SessionID_Description" xml:space="preserve">
    <value>The ID of the session.</value>
  </data>
  <data name="Cmd_Shutdown_Description" xml:space="preserve">
    <value>Shuts down the service and quits.</value>
  </data>
  <data name="Cmd_Shutdown_Names" xml:space="preserve">
    <value>Shutdown</value>
  </data>
  <data name="Cmd_Start_Args_Description" xml:space="preserve">
    <value>The service start arguments.</value>
  </data>
  <data name="Cmd_Start_Description" xml:space="preserve">
    <value>Starts the service, passing in the specified arguments, e.g. start arg1 arg2 arg3.</value>
  </data>
  <data name="Cmd_Start_Names" xml:space="preserve">
    <value>Start,Go,G</value>
  </data>
  <data name="Cmd_Stop_Description" xml:space="preserve">
    <value>Stops the service.</value>
  </data>
  <data name="Cmd_Stop_Names" xml:space="preserve">
    <value>Stop,S</value>
  </data>
  <data name="Cri_Base_Service_Command_Error" xml:space="preserve">
    <value>An error was received from the command observable of the '{0}' connection, disconnecting.</value>
  </data>
  <data name="Err_Command_Exception" xml:space="preserve">
    <value>Fatal error executing the '{0}' command.</value>
  </data>
  <data name="Err_Command_Failed" xml:space="preserve">
    <value>The '{0}' command failed.</value>
  </data>
  <data name="Err_Command_Not_On_Instance" xml:space="preserve">
    <value>The '{0}' command was not found on the '{1}' instance.</value>
  </data>
  <data name="Err_No_Console_Logger" xml:space="preserve">
    <value>No console logger has been set!</value>
  </data>
  <data name="Err_ServiceCommand_Invalid_Command_Method" xml:space="preserve">
    <value>Invalid command method '{0}'. A service runner command with ConsumeLine set must declare exactly one string parameter.</value>
  </data>
  <data name="Err_ServiceCommand_Parameter_Conversion_Unsupported" xml:space="preserve">
    <value>Cannot convert string to '{0}' for parameter '{1}' on method '{2}'.</value>
  </data>
  <data name="Err_ServiceRunner_Continue_ServiceNotPaused" xml:space="preserve">
    <value>The '{0}' service is not paused!</value>
  </data>
  <data name="Err_ServiceRunner_Pause_ServiceNotRunning" xml:space="preserve">
    <value>The '{0}' service is not running, so cannot be paused!</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_CommandParameterInvalid" xml:space="preserve">
    <value>The command number '{0}' must be an integer.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_CommandParameterMissing" xml:space="preserve">
    <value>Command requires one parameters, a command number.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_ConsoleNotFound" xml:space="preserve">
    <value>Cannot run the '{0}' service in interactive mode as no console found!</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_ContinueParameters" xml:space="preserve">
    <value>Continue does not accept parameters.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_LoggingLevelsInvalid" xml:space="preserve">
    <value>The LoggingLevels '{0}' must be one of: {1}.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_LoggingLevelsTooManyParameters" xml:space="preserve">
    <value>Loglevels allows one parameters, a LoggingLevels.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_PauseParameters" xml:space="preserve">
    <value>Pause does not accept parameters.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_PowerParameterMissing" xml:space="preserve">
    <value>Power requires one parameters, a PowerBroadcastStatus.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_PowerParamterInvalid" xml:space="preserve">
    <value>The PowerBroadcastStatus '{0}' must be one of: {1}.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_SessionChangeInvalid" xml:space="preserve">
    <value>The SessionChangeReason '{0}' must be one of: {1}.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_SessionIdInvalid" xml:space="preserve">
    <value>The session id '{0}' must be an integer.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_SessionParamtersMissing" xml:space="preserve">
    <value>Session requires two parameters, a SessionChangeReason and a Session id.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_ShutdownParameters" xml:space="preserve">
    <value>Shutdown does not accept parameters.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_StopParameters" xml:space="preserve">
    <value>Stop does not accept parameters.</value>
  </data>
  <data name="Err_ServiceRunner_RunInteractive_UnknownCommand" xml:space="preserve">
    <value>Unknown command '{0}'.</value>
  </data>
  <data name="Err_ServiceRunner_ServiceAlreadyRunning" xml:space="preserve">
    <value>The '{0}' service is already running!</value>
  </data>
  <data name="Err_ServiceRunner_ServiceNotInteractive" xml:space="preserve">
    <value>The '{0}' service is not interactive!</value>
  </data>
  <data name="Err_ServiceRunner_Stop_ServiceNotRunning" xml:space="preserve">
    <value>The '{0}' service is not running, so cannot be stopped!</value>
  </data>
  <data name="Err_Unknown_Command" xml:space="preserve">
    <value>The '{0}' command is not supported by the service.</value>
  </data>
  <data name="Inf_ServiceRunner_Continue_Continued" xml:space="preserve">
    <value>Continued service '{0}' in {1}ms.</value>
  </data>
  <data name="Inf_ServiceRunner_Continue_Continuing" xml:space="preserve">
    <value>Continuing service '{0}'.</value>
  </data>
  <data name="Inf_ServiceRunner_Continue_NotSupported" xml:space="preserve">
    <value>Service '{0}' does not support continue.</value>
  </data>
  <data name="Inf_ServiceRunner_CustomCommand_Complete" xml:space="preserve">
    <value>Running '{0}' custom command on service '{1}' took {2}ms.</value>
  </data>
  <data name="Inf_ServiceRunner_CustomCommand_Running" xml:space="preserve">
    <value>Running '{0}' custom command on service '{1}'.</value>
  </data>
  <data name="Inf_ServiceRunner_Dispose_AlreadyDisposed" xml:space="preserve">
    <value>Service '{0}' already disposed.</value>
  </data>
  <data name="Inf_ServiceRunner_Dispose_Disposed" xml:space="preserve">
    <value>Disposed service '{0}' in {1}ms.</value>
  </data>
  <data name="Inf_ServiceRunner_Dispose_Disposing" xml:space="preserve">
    <value>Disposing service '{0}'.</value>
  </data>
  <data name="Inf_ServiceRunner_Pause_NotSupported" xml:space="preserve">
    <value>Service '{0}' does not support pausing.</value>
  </data>
  <data name="Inf_ServiceRunner_Pause_Paused" xml:space="preserve">
    <value>Paused service '{0}' in {1}ms.</value>
  </data>
  <data name="Inf_ServiceRunner_Pause_Pausing" xml:space="preserve">
    <value>Pausing service '{0}'.</value>
  </data>
  <data name="Inf_ServiceRunner_PowerEvent_NotSupported" xml:space="preserve">
    <value>Service '{0}' does not support power events.</value>
  </data>
  <data name="Inf_ServiceRunner_PowerEvent_Sending" xml:space="preserve">
    <value>Sending the '{0}' power event to service '{1}'.</value>
  </data>
  <data name="Inf_ServiceRunner_PowerEvent_Sent" xml:space="preserve">
    <value>Sending the '{0}' power event to service '{1}' took {2}ms, and returned '{3}'.</value>
  </data>
  <data name="Inf_ServiceRunner_RunAsService_ServiceNotInteractive" xml:space="preserve">
    <value>The '{0}' service is running in non-interactive mode</value>
  </data>
  <data name="Inf_ServiceRunner_SessionChange_NotSupported" xml:space="preserve">
    <value>Service '{0}' does not support session change events.</value>
  </data>
  <data name="Inf_ServiceRunner_SessionChange_Sending" xml:space="preserve">
    <value>Sending the '{0}' session change event for session '{1}' to service '{2}'.</value>
  </data>
  <data name="Inf_ServiceRunner_SessionChange_Sent" xml:space="preserve">
    <value>Sending the '{0}' session change event for session '{1}' to service '{2}' took {3}ms.</value>
  </data>
  <data name="Inf_ServiceRunner_Shutdown_NotSupported" xml:space="preserve">
    <value>Service '{0}' does not support shutdown.</value>
  </data>
  <data name="Inf_ServiceRunner_Shutdown_ShutDown" xml:space="preserve">
    <value>Shut down service '{0}' in {1}ms.</value>
  </data>
  <data name="Inf_ServiceRunner_Shutdown_ShuttingDown" xml:space="preserve">
    <value>Shutting down service '{0}'.</value>
  </data>
  <data name="Inf_ServiceRunner_Start_Started" xml:space="preserve">
    <value>Started service '{0}' in {1}ms.</value>
  </data>
  <data name="Inf_ServiceRunner_Start_Starting" xml:space="preserve">
    <value>Starting service '{0}'.</value>
  </data>
  <data name="Inf_ServiceRunner_Stop_NotSupported" xml:space="preserve">
    <value>Service '{0}' does not support stopping.</value>
  </data>
  <data name="Inf_ServiceRunner_Stop_Stopped" xml:space="preserve">
    <value>Stopped service '{0}' in {1}ms.</value>
  </data>
  <data name="Inf_ServiceRunner_Stop_Stopping" xml:space="preserve">
    <value>Stopping service '{0}'.</value>
  </data>
  <data name="Wrn_Command_Alias_Already_Used_By_Other_Command" xml:space="preserve">
    <value>The '{0}' command alias for '{1}' is already used by the '{2}' command.</value>
  </data>
  <data name="Wrn_Command_Already_Registered" xml:space="preserve">
    <value>The '{0}' command on the '{1}' type has already been registered by the '{2}' type.</value>
  </data>
  <data name="Wrn_Command_Invalid_Generic" xml:space="preserve">
    <value>The '{0}' method cannot implement a service runner command as it is generic.</value>
  </data>
  <data name="Wrn_No_Description_For_Command" xml:space="preserve">
    <value>No description was specified for the '{0}' command.</value>
  </data>
  <data name="Wrn_No_Description_For_Parameter" xml:space="preserve">
    <value>No description was specified for the '{0}' parameter in the '{1}' command.</value>
  </data>
  <data name="Wrn_No_Names_For_Command" xml:space="preserve">
    <value>No names were found for the '{0}' command.</value>
  </data>
  <data name="Wrn_ServiceCommand_Creation_Failed" xml:space="preserve">
    <value>Failed to create a service runner command for the '{0}' method</value>
  </data>
</root>